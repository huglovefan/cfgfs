#!/bin/sh

# wrapper script that starts cfgfs together with the game

if [ $# -eq 0 ]; then
	>&2 echo "usage: cfgfs_run [...] <game_executable> -game <dirname> [...]"
	>&2 echo "or rather, you're not meant to use this directly but by setting it in the launch options"
	exit 1
fi

# pwd:
# [[/home/human/.local/share/Steam/steamapps/common/Team Fortress 2]]
# %command%:
# [['/home/human/.local/share/Steam/steamapps/common/Team Fortress 2/hl2.sh' -game tf -steam]]

t=$(realpath -- "$0") || exit
t=$(dirname -- "$t") || exit
[ -e "$t/cfgfs" ] || exit

export CFGFS_STARTTIME="$(date +%s)"

cfgfs_dir=$t
cfgfs_mountpoint=
gamedir=
gameroot=$PWD

find_gamedir_from_cmdline() {
	while [ $# -ge 3 ]; do
		if [ -f "$1" -a -x "$1" ] && \
		   [ "$2" = "-game" ] && \
		   [ -d "$gameroot/$3" ] \
		; then
			gamedir=$gameroot/$3
			return 0
		fi
		shift
	done
	return 1
}
if ! find_gamedir_from_cmdline "$@"; then
	>&2 echo "cfgfs_run: missing -game parameter"
	exit 1
fi

cfgfs_mountpoint=$gamedir/custom/!cfgfs/cfg

mkdir -p "$cfgfs_mountpoint" || exit

{
cd -- "$cfgfs_dir" || exit

# steam sets this to "C" which breaks unicode support in xterm
if [ "$LC_ALL" = "C" ]; then unset LC_ALL; fi

# steam sets these to funny values which breaks things
unset LD_PRELOAD
unset LD_LIBRARY_PATH

export GAMEDIR="$gamedir"
export GAMEROOT="$gameroot"

# parse the game name from gameinfo.txt
if [ -f "$gamedir/gameinfo.txt" ] && \
   gamename=$(grep -Poim1 '^\s*(?:game\s|"game")\s*(?:"\K[^"]*(?=(?:"\s*)?$)|\K.*?(?=\s*$))' "$gamedir/gameinfo.txt") \
; then
	export GAMENAME="$gamename"
fi

if [ -z "$CFGFS_SCRIPT" ]; then
	# note: SteamAppId is defined by steam
	export CFGFS_SCRIPT=script_${SteamAppId}.lua
	if [ ! -e "$CFGFS_SCRIPT" ]; then
		{
		echo "-- cfgfs script for ${GAMENAME:-app id ${SteamAppId}}"
		echo ""
		echo "cmd.echo('cfgfs: script_${SteamAppId}.lua loaded')"
		} >>"$CFGFS_SCRIPT"
	fi
fi
export CFGFS_RUN_PID=$$
while true; do
	xterm -title "cfgfs (${GAMENAME:-App ID ${SteamAppId}})" -e /bin/sh cfgfs_failsafe.sh "$cfgfs_mountpoint"
	if ! { pstree -aAclntT -p "$CFGFS_RUN_PID" | awk '/\+exec cfgfs\/init/{f=1}END{exit(!f)}'; }; then
		break
	fi
	export CFGFS_RESTARTED=1
	export CFGFS_TERMINAL_CLOSED=1
done
} &
cfgfs_term_pid=$!

wait_cfgfs_ready() {
	iter=1
	while true; do
		if mountpoint -q "$cfgfs_mountpoint"; then
			return 0
		fi
		if [ ! -e "/proc/$cfgfs_term_pid" ]; then
			return 1
		fi
		if [ $iter -le 10 ]; then
			command sleep 0.1
			# hope the non-builtin sleep supports fractional sleeping
		else
			sleep 1 || return 1
		fi
		iter=$((iter+1))
	done
}

wait_cfgfs_ready || exit

if [ -f "$gamedir/console.log" -a ! -L "$gamedir/console.log" ]; then
	newname=$gamedir/console.log.old
	if [ -e "$newname" ]; then
		newname=$gamedir/console.log.$(date +%s)
	fi
	mv -fv "$gamedir/console.log" "$newname"
fi
ln -sfv custom/!cfgfs/cfg/console.log "$gamedir/console.log"

command "$@" \
    -condebug \
    +exec cfgfs/init
rv=$?

fusermount -u "$cfgfs_mountpoint" 2>/dev/null &

if [ -L "$gamedir/console.log" ]; then
	rm -fv "$gamedir/console.log"
fi

exit $rv
